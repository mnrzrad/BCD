test_fixed_functions <- function() {
  cat("=== TESTING FIXED NORMALIZATION CONSTANT ===\n")
  
  # Test parameters
  n1 <- 5
  n2 <- 3
  p1 <- 0.6
  p2 <- 0.4
  lambda_range <- c(0.5, 1.0, 1.2, 1.5, 2.0, 5.0, 10.0)
  
  cat("Original function:\n")
  for (lambda in lambda_range) {
    tryCatch({
      norm_const <- normalize_constant_BBCD(n1, n2, p1, p2, lambda)
      cat(sprintf("Lambda = %.1f: %.8f\n", lambda, norm_const))
    }, error = function(e) {
      cat(sprintf("Lambda = %.1f: ERROR\n", lambda))
    })
  }
  
  cat("\nFixed function:\n")
  for (lambda in lambda_range) {
    tryCatch({
      norm_const <- normalize_constant_BBCD_stable(n1, n2, p1, p2, lambda)
      cat(sprintf("Lambda = %.1f: %.8f\n", lambda, norm_const))
    }, error = function(e) {
      cat(sprintf("Lambda = %.1f: ERROR\n", lambda))
    })
  }
}

# Profile likelihood using the fixed function
profile_likelihood_fixed <- function(data, n1, n2, lambda_range = seq(0.1, 3, by = 0.05)) {
  if (is.data.frame(data)) {
    X <- data[[1]]
    Y <- data[[2]]
  } else {
    X <- data[, 1]
    Y <- data[, 2]
  }
  
  cat("=== PROFILE LIKELIHOOD WITH FIXED FUNCTIONS ===\n")
  
  profile_results <- data.frame(
    lambda = lambda_range,
    loglik = NA,
    p1_opt = NA,
    p2_opt = NA
  )
  
  for (i in seq_along(lambda_range)) {
    lambda <- lambda_range[i]
    
    # For fixed lambda, optimize over p1 and p2
    opt_fn <- function(params) {
      p1 <- params[1]
      p2 <- params[2]
      
      if (p1 <= 0 || p1 >= 1 || p2 <= 0 || p2 >= 1) {
        return(Inf)
      }
      
      total_loglik <- 0
      for (j in seq_along(X)) {
        tryCatch({
          prob <- dbinomBCD_stable(X[j], Y[j], n1, n2, p1, p2, lambda)
          if (prob > 0 && is.finite(prob)) {
            total_loglik <- total_loglik + log(prob)
          } else {
            return(Inf)
          }
        }, error = function(e) {
          return(Inf)
        })
      }
      
      return(-total_loglik)
    }
    
    # Optimize p1 and p2
    initial_p1 <- mean(X) / n1
    initial_p2 <- mean(Y) / n2
    initial_p1 <- max(0.01, min(0.99, initial_p1))
    initial_p2 <- max(0.01, min(0.99, initial_p2))
    
    opt_result <- tryCatch({
      optim(par = c(initial_p1, initial_p2),
            fn = opt_fn,
            method = "L-BFGS-B",
            lower = c(0.001, 0.001),
            upper = c(0.999, 0.999),
            control = list(maxit = 500))
    }, error = function(e) {
      list(par = c(initial_p1, initial_p2), value = Inf, convergence = 1)
    })
    
    if (opt_result$convergence == 0 && is.finite(opt_result$value)) {
      profile_results$loglik[i] <- -opt_result$value
      profile_results$p1_opt[i] <- opt_result$par[1]
      profile_results$p2_opt[i] <- opt_result$par[2]
    }
    
    # Progress indicator
    if (i %% 10 == 0) {
      cat(sprintf("Progress: %d/%d\n", i, length(lambda_range)))
    }
  }
  
  # Find the best lambda
  valid_results <- profile_results[is.finite(profile_results$loglik), ]
  if (nrow(valid_results) > 0) {
    best_idx <- which.max(valid_results$loglik)
    best_result <- valid_results[best_idx, ]
    
    cat("\n=== RESULTS WITH FIXED FUNCTIONS ===\n")
    cat("Best lambda:", round(best_result$lambda, 4), "\n")
    cat("Best p1:", round(best_result$p1_opt, 4), "\n")
    cat("Best p2:", round(best_result$p2_opt, 4), "\n")
    cat("Best log-likelihood:", round(best_result$loglik, 4), "\n")
    
    # Plot profile likelihood
    plot(valid_results$lambda, valid_results$loglik, type = "l",
         xlab = "Lambda", ylab = "Profile Log-likelihood",
         main = "Profile Likelihood for Lambda (Fixed Functions)")
    abline(v = best_result$lambda, col = "red", lty = 2)
    text(best_result$lambda, max(valid_results$loglik) * 0.9, 
         paste("Î» =", round(best_result$lambda, 3)), 
         col = "red", adj = 0)
    
    return(list(
      best_result = best_result,
      all_results = valid_results
    ))
  } else {
    cat("ERROR: No valid results found\n")
    return(NULL)
  }
}

# Complete diagnosis with fixed functions
diagnose_with_fixes <- function(data, true_params) {
  cat("========================================\n")
  cat("DIAGNOSIS WITH FIXED FUNCTIONS\n")
  cat("========================================\n\n")
  
  # Test the normalization functions
  test_fixed_functions()
  
  cat("\n========================================\n\n")
  
  # Run profile likelihood with fixed functions
  if (is.data.frame(data)) {
    X <- data[[1]]
    Y <- data[[2]]
  } else {
    X <- data[, 1]
    Y <- data[, 2]
  }
  
  profile_result <- profile_likelihood_fixed(data, max(X), max(Y))
  
  if (!is.null(profile_result)) {
    cat("\n=== COMPARISON WITH TRUE VALUES ===\n")
    cat("True lambda:", true_params$lambda, "\n")
    cat("Estimated lambda:", round(profile_result$best_result$lambda, 4), "\n")
    cat("Difference:", abs(true_params$lambda - profile_result$best_result$lambda), "\n")
  }
  
  return(profile_result)
}

cat("Now run:\n")
cat("1. test_fixed_functions() - to see if normalization is fixed\n")
cat("2. diagnose_with_fixes(data, true_params) - for complete analysis\n")
normalize_constant_BBCD_stable(5,5,0.6,0.4,1.2)
pbinomBCD_stable <- function(x, y, n1, n2, p1, p2, lambda) {
  if (!is.numeric(x) || !is.numeric(y) || !is.numeric(n1) || !is.numeric(n2) ||
      !is.numeric(p1) || !is.numeric(p2) || !is.numeric(lambda)) {
    stop("All inputs must be numeric.")
  }
  if (n1 < 0 || n2 < 0) {
    stop("n1 and n2 should be positive.")
  }
  if (p1 < 0 || p1 > 1 || p2 < 0 || p2 > 1) {
    stop("p1 and p2 must be between 0 and 1.")
  }
  if (lambda <= 0) {
    stop("Lambda must be greater than zero.")
  }
  c <- normalize_constant_BBCD_stable(n1, n2, p1, p2, lambda)
  sum_cdf <- 0
  for (xx in 0:x) {
    for (yy in 0:y) {
      if(x <0 || y < 0){
        sum_cdf <- 0; break
      }
      log_term <- log(choose(n1, xx)) + log(choose(n2, yy)) +
        xx * log(p1) + yy * log(p2) +
        (n1 - xx) * log(1 - p1) + (n2 - yy) * log(1 - p2) +
        (xx * yy) * log(lambda)
      term <- exp(log_term)
      sum_cdf <- sum_cdf + term
    }
  }
  return(c * sum_cdf)
}
pbinomBCD_stable(3,5,3,5,0.1,0.4,0.2)
# Test the fixed normalization function
test_fixed_functions()

# Run complete diagnosis with fixes
result_fixed <- diagnose_with_fixes(data, true_params)

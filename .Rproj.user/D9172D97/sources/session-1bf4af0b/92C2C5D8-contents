# ROBUST SOLUTION: Compute everything in log-space from the start

# Function to compute log-normalization constant
log_normalize_constant_BBCD <- function(n1, n2, p1, p2, lambda) {
  x_vals <- 0:n1
  y_vals <- 0:n2
  
  # Pre-compute log terms
  log_p1 <- log(p1)
  log_1_minus_p1 <- log(1 - p1)
  log_p2 <- log(p2)
  log_1_minus_p2 <- log(1 - p2)
  log_lambda <- log(lambda)
  
  # Compute all log probabilities
  log_probs <- numeric(length(x_vals) * length(y_vals))
  idx <- 1
  
  for (x in x_vals) {
    for (y in y_vals) {
      log_prob <- lchoose(n1, x) + lchoose(n2, y) +
        x * log_p1 + (n1 - x) * log_1_minus_p1 +
        y * log_p2 + (n2 - y) * log_1_minus_p2 +
        (x * y) * log_lambda
      
      log_probs[idx] <- log_prob
      idx <- idx + 1
    }
  }
  
  # Use log-sum-exp for numerical stability
  max_log_prob <- max(log_probs)
  log_sum <- max_log_prob + log(sum(exp(log_probs - max_log_prob)))
  
  return(log_sum)
}

# Function to compute log probability directly (no normalization constant needed)
log_dbinomBCD <- function(x, y, n1, n2, p1, p2, lambda) {
  # Input validation
  if (x < 0 || x > n1 || y < 0 || y > n2) {
    return(-Inf)
  }
  if (p1 <= 0 || p1 >= 1 || p2 <= 0 || p2 >= 1 || lambda <= 0) {
    return(-Inf)
  }
  
  # Compute log normalization constant
  log_norm_const <- log_normalize_constant_BBCD(n1, n2, p1, p2, lambda)
  
  # Compute log probability
  log_prob <- lchoose(n1, x) + lchoose(n2, y) +
    x * log(p1) + (n1 - x) * log(1 - p1) +
    y * log(p2) + (n2 - y) * log(1 - p2) +
    (x * y) * log(lambda) - log_norm_const
  
  return(log_prob)
}

# Direct log-likelihood computation
compute_log_likelihood <- function(data, n1, n2, p1, p2, lambda) {
  if (is.data.frame(data)) {
    X <- data[[1]]
    Y <- data[[2]]
  } else {
    X <- data[, 1]
    Y <- data[, 2]
  }
  
  # Parameter validation
  if (p1 <= 0 || p1 >= 1 || p2 <= 0 || p2 >= 1 || lambda <= 0) {
    return(-Inf)
  }
  
  # Check data bounds
  if (any(X > n1) || any(Y > n2) || any(X < 0) || any(Y < 0)) {
    return(-Inf)
  }
  
  # Compute log normalization constant once
  log_norm_const <- log_normalize_constant_BBCD(n1, n2, p1, p2, lambda)
  
  # Sum log probabilities
  total_log_lik <- 0
  for (i in seq_along(X)) {
    log_prob <- lchoose(n1, X[i]) + lchoose(n2, Y[i]) +
      X[i] * log(p1) + (n1 - X[i]) * log(1 - p1) +
      Y[i] * log(p2) + (n2 - Y[i]) * log(1 - p2) +
      (X[i] * Y[i]) * log(lambda) - log_norm_const
    
    total_log_lik <- total_log_lik + log_prob
  }
  
  return(total_log_lik)
}

# Robust profile likelihood
robust_profile_likelihood <- function(data, n1, n2, lambda_range = seq(0.1, 3, by = 0.02)) {
  if (is.data.frame(data)) {
    X <- data[[1]]
    Y <- data[[2]]
  } else {
    X <- data[, 1]
    Y <- data[, 2]
  }
  
  cat("=== ROBUST PROFILE LIKELIHOOD ===\n")
  cat("Testing", length(lambda_range), "lambda values from", min(lambda_range), "to", max(lambda_range), "\n\n")
  
  results <- data.frame(
    lambda = lambda_range,
    loglik = NA,
    p1_opt = NA,
    p2_opt = NA,
    convergence = NA
  )
  
  pb <- txtProgressBar(min = 0, max = length(lambda_range), style = 3)
  
  for (i in seq_along(lambda_range)) {
    lambda <- lambda_range[i]
    
    # Optimize p1 and p2 for fixed lambda
    opt_fn <- function(params) {
      p1 <- params[1]
      p2 <- params[2]
      
      # Return negative log-likelihood for minimization
      log_lik <- compute_log_likelihood(data, n1, n2, p1, p2, lambda)
      
      if (is.finite(log_lik)) {
        return(-log_lik)
      } else {
        return(1e10)  # Large penalty for invalid parameters
      }
    }
    
    # Good initial values
    p1_init <- max(0.01, min(0.99, mean(X) / n1))
    p2_init <- max(0.01, min(0.99, mean(Y) / n2))
    
    # Optimize
    opt_result <- tryCatch({
      optim(par = c(p1_init, p2_init),
            fn = opt_fn,
            method = "L-BFGS-B",
            lower = c(0.001, 0.001),
            upper = c(0.999, 0.999),
            control = list(maxit = 1000, factr = 1e12))
    }, error = function(e) {
      list(par = c(p1_init, p2_init), value = 1e10, convergence = 1)
    })
    
    # Store results
    if (opt_result$convergence == 0 && opt_result$value < 1e9) {
      results$loglik[i] <- -opt_result$value
      results$p1_opt[i] <- opt_result$par[1]
      results$p2_opt[i] <- opt_result$par[2]
      results$convergence[i] <- 0
    } else {
      results$convergence[i] <- opt_result$convergence
    }
    
    setTxtProgressBar(pb, i)
  }
  
  close(pb)
  
  # Find best result
  valid_results <- results[results$convergence == 0 & is.finite(results$loglik), ]
  
  if (nrow(valid_results) > 0) {
    best_idx <- which.max(valid_results$loglik)
    best_result <- valid_results[best_idx, ]
    
    cat("\n\n=== ROBUST RESULTS ===\n")
    cat("Best lambda:", round(best_result$lambda, 4), "\n")
    cat("Best p1:", round(best_result$p1_opt, 4), "\n")
    cat("Best p2:", round(best_result$p2_opt, 4), "\n")
    cat("Best log-likelihood:", round(best_result$loglik, 4), "\n")
    cat("Number of valid estimates:", nrow(valid_results), "out of", length(lambda_range), "\n")
    
    # Create detailed plot
    par(mfrow = c(2, 2))
    
    # Plot 1: Profile likelihood
    plot(valid_results$lambda, valid_results$loglik, type = "l", lwd = 2,
         xlab = "Lambda", ylab = "Profile Log-likelihood",
         main = "Profile Likelihood for Lambda")
    abline(v = best_result$lambda, col = "red", lty = 2, lwd = 2)
    grid()
    
    # Plot 2: p1 estimates
    plot(valid_results$lambda, valid_results$p1_opt, type = "l", lwd = 2, col = "blue",
         xlab = "Lambda", ylab = "Optimal p1",
         main = "p1 vs Lambda")
    abline(h = best_result$p1_opt, col = "red", lty = 2)
    grid()
    
    # Plot 3: p2 estimates  
    plot(valid_results$lambda, valid_results$p2_opt, type = "l", lwd = 2, col = "green",
         xlab = "Lambda", ylab = "Optimal p2", 
         main = "p2 vs Lambda")
    abline(h = best_result$p2_opt, col = "red", lty = 2)
    grid()
    
    # Plot 4: Convergence status
    plot(results$lambda, results$convergence, type = "p", 
         xlab = "Lambda", ylab = "Convergence Code",
         main = "Optimization Convergence")
    grid()
    
    par(mfrow = c(1, 1))
    
    return(list(
      best_result = best_result,
      all_results = valid_results,
      raw_results = results
    ))
  } else {
    cat("\nERROR: No valid results found!\n")
    cat("Convergence codes:\n")
    print(table(results$convergence))
    return(NULL)
  }
}

# Test the robust approach
test_robust_approach <- function(data, true_params) {
  cat("========================================\n")
  cat("TESTING ROBUST LOG-SPACE APPROACH\n")
  cat("========================================\n\n")
  
  if (is.data.frame(data)) {
    X <- data[[1]]
    Y <- data[[2]]
  } else {
    X <- data[, 1]
    Y <- data[, 2]
  }
  
  n1 <- max(X)
  n2 <- max(Y)
  
  cat("Using n1 =", n1, "and n2 =", n2, "\n\n")
  
  # Test log-likelihood computation at true parameters
  true_loglik <- compute_log_likelihood(data, true_params$n1, true_params$n2, 
                                        true_params$p1, true_params$p2, true_params$lambda)
  cat("Log-likelihood at true parameters:", round(true_loglik, 4), "\n\n")
  
  # Run robust profile likelihood
  result <- robust_profile_likelihood(data, n1, n2, lambda_range = seq(0.1, 3.0, by = 0.02))
  
  if (!is.null(result)) {
    cat("\n=== COMPARISON WITH TRUE VALUES ===\n")
    cat("True lambda:", true_params$lambda, "\n")
    cat("Estimated lambda:", round(result$best_result$lambda, 4), "\n")
    cat("Absolute error:", round(abs(true_params$lambda - result$best_result$lambda), 4), "\n")
    cat("Relative error:", round(abs(true_params$lambda - result$best_result$lambda) / true_params$lambda * 100, 2), "%\n")
  }
  
  return(result)
}

cat("Now run: robust_result <- test_robust_approach(data, true_params)\n")
robust_result <- test_robust_approach(data, true_params)

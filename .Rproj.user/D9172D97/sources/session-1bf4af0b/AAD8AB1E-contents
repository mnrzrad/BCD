normalize_constant_BBCD <- function(n1, n2, p1, p2, lambda) {
  x_vals <- 0:n1
  y_vals <- 0:n2
  log_x_terms <- dbinom(x_vals, n1, p1, log = TRUE)
  log_y_terms <- dbinom(y_vals, n2, p2, log = TRUE)
  log_x_matrix <- matrix(rep(log_x_terms, each = length(y_vals)),
                         nrow = length(y_vals), ncol = length(x_vals))
  log_y_matrix <- matrix(rep(log_y_terms, times = length(x_vals)),
                         nrow = length(y_vals), ncol = length(x_vals))
  xy_matrix <- outer(y_vals, x_vals, function(y, x) x * y)
  log_lambda_matrix <- xy_matrix * log(lambda)
  log_total_matrix <- log_x_matrix + log_y_matrix + log_lambda_matrix
  max_log <- max(log_total_matrix)
  log_sum <- max_log + log(sum(exp(log_total_matrix - max_log)))
  return(exp(-log_sum))
}

normalize_constant_BGCD <- function(q1, q2, q3, max_iter = 100, tol = 1e-12) {
  if (any(c(q1, q2, q3) <= 0) || any(c(q1, q2, q3) >= 1)) return(Inf)

  x <- 0:max_iter
  y <- 0:max_iter

  mat <- outer(x, y, function(x, y) {
    log_term <- x * log(q1) + y * log(q2) + (x * y) * log(q3)
    exp(log_term)
  })

  total <- sum(mat)
  if (!is.finite(total) || total < tol) return(Inf)

  return(1 / total)
}

normalize_constant_BPCD <- function(lam1,lam2,lam3, max_iter = 10000) {
  norm_const <- 0
  for (y in 0:max_iter) {
      term <- ((lam2^y)/factorial(y)) * exp(lam1*(lam3^y))
      if (term < .Machine$double.eps)
        break
      norm_const <- norm_const + term
    }
  return(1 / norm_const)
}

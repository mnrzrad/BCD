normalize_constant_BBCD <- function(n1, n2, p1, p2, lambda) {
  x_vals <- 0:n1
  y_vals <- 0:n2
  x_terms <- dbinom(x_vals, n1, p1)
  y_terms <- dbinom(y_vals, n2, p2)
  lambda_matrix <- outer(x_vals, y_vals, function(x, y) lambda^(x*y))
  term_matrix <- outer(x_terms, y_terms) * lambda_matrix
  return(1 / sum(term_matrix))
}
dbinomBCD <- function(x, y, n1, n2, p1, p2, lambda) {
  # Input validation
  if (!is.numeric(x) || !is.numeric(y) || !is.numeric(n1) || !is.numeric(n2) ||
      !is.numeric(p1) || !is.numeric(p2) || !is.numeric(lambda)) {
    stop("All inputs must be numeric.")
  }
  if (x < 0 || x > n1 || y < 0 || y > n2 ) {
    stop("x and y must be between 0 and their respective n values.")
  }
  if (n1 < 0 || n2 < 0){
    stop("n1 and n2 should be positive.")
  }
  if (p1 < 0 || p1 > 1 || p2 < 0 || p2 > 1) {
    stop("p1 and p2 must be between 0 and 1.")
  }
  if (lambda <= 0) {
    stop("Lambda must be greater than zero.")
  }
  
  # Get normalization constant
  c <- 1/normalize_constant_BBCD(n1, n2, p1, p2, lambda)
  
  # For large lambda or large x*y product, compute in log space
  if (lambda > 10 || (x * y > 50)) {
    # Calculate in log space to avoid overflow
    log_pmf <- log(c) +
      lchoose(n1, x) +
      lchoose(n2, y) +
      x * log(p1) +
      y * log(p2) +
      (n1 - x) * log(1 - p1) +
      (n2 - y) * log(1 - p2) +
      (x * y) * log(lambda)
    
    return(exp(log_pmf))
  } else {
    # Original calculation for smaller lambda values
    pmf <- c * choose(n1, x) * choose(n2, y) *
      (p1^x) * (p2^y) *
      ((1 - p1)^(n1 - x)) * ((1 - p2)^(n2 - y)) *
      (lambda^(x * y))
    return(pmf)
  }
}
rbinomBCD <- function(n, n1, n2, p1, p2, lambda, seed = 123, verbose = TRUE) {
  set.seed(seed)
  
  if (!is.numeric(n) || length(n) != 1 || n <= 0 || n != round(n)) {
    stop("n must be a positive integer.")
  }
  if (!is.numeric(n1) || length(n1) != 1 || n1 <= 0 || n1 != round(n1)) {
    stop("n1 must be a positive integer.")
  }
  if (!is.numeric(n2) || length(n2) != 1 || n2 <= 0 || n2 != round(n2)) {
    stop("n2 must be a positive integer.")
  }
  if (!is.numeric(p1) || length(p1) != 1 || p1 < 0 || p1 > 1) {
    stop("p1 must be a numeric scalar in [0, 1].")
  }
  if (!is.numeric(p2) || length(p2) != 1 || p2 < 0 || p2 > 1) {
    stop("p2 must be a numeric scalar in [0, 1].")
  }
  if (!is.numeric(lambda) || length(lambda) != 1 || lambda <= 0) {
    stop("lambda must be a positive numeric scalar.")
  }
  
  start_time <- Sys.time()
  total_attempts <- 0
  last_report_time <- start_time
  
  if (verbose) {
    cat(sprintf("Starting to generate %d samples with parameters:\n", n))
    cat(sprintf("n1 = %d, n2 = %d, p1 = %.4f, p2 = %.4f, lambda = %.4f\n", n1, n2, p1, p2, lambda))
    
    if (lambda > 1) {
      cat("\nWARNING: For lambda > 1, sampling may take significantly longer due
          to the nature of the distribution.\n")
      cat("Please be patient as the simulation runs...\n\n")
    }
  }
  
  KG <- normalize_constant_BBCD(n1, n2, p1, p2, lambda)
  samples <- matrix(NA, nrow = n, ncol = 2)
  count <- 0
  
  while (count < n) {
    x <- rbinom(1, n1, p1)
    y <- rbinom(1, n2, p2)
    u <- runif(1)
    p <- dbinomBCD(x, y, n1, n2, p1, p2, lambda)
    g <- dbinom(x, n1, p1) * dbinom(y, n2, p2)
    M <- KG / (p1 * p2)
    
    total_attempts <- total_attempts + 1
    
    if (g > 0 && u < p / (M * g)) {
      count <- count + 1
      samples[count, ] <- c(x, y)
      
      if (verbose && count %% 10 == 0) {
        curr_time <- Sys.time()
        elapsed <- difftime(curr_time, start_time, units = "secs")
        acceptance_rate <- count / total_attempts
        cat(sprintf("\r%d/%d samples (%.1f%%) | Attempts: %d | Time: %.1f sec",
                    count, n, count / n * 100, total_attempts, as.numeric(elapsed)))
        utils::flush.console()
      }
    }
    
    if (verbose && total_attempts %% 10000 == 0) {
      curr_time <- Sys.time()
      elapsed <- difftime(curr_time, start_time, units = "secs")
      acceptance_rate <- count / total_attempts
      cat(sprintf("\r%d/%d samples (%.1f%%) | Attempts: %d | Time: %.1f sec",
                  count, n, count / n * 100, total_attempts, as.numeric(elapsed)))
      utils::flush.console()
    }
  }
  
  if (verbose) {
    elapsed <- difftime(Sys.time(), start_time, units = "secs")
    acceptance_rate <- count / total_attempts
    rate_per_second <- count / as.numeric(elapsed)
    
    cat(sprintf("\n\nSampling completed:\n"))
    cat(sprintf("Total samples: %d\n", count))
    cat(sprintf("Total attempts: %d\n", total_attempts))
    cat(sprintf("Total time: %.2f seconds\n", as.numeric(elapsed)))
    
    cor_val <- cor(samples[,1], samples[,2])
    sign_txt <- ifelse(cor_val > 0.01, "positive",
                       ifelse(cor_val < -0.01, "negative", "approximately zero"))
    cat(sprintf("Sample correlation: %.4f (%s)\n", cor_val, sign_txt))
    expected_sign <- ifelse(lambda > 1, "positive", ifelse(lambda < 1, "negative", "approximately zero"))
    if (sign_txt != expected_sign) {
      cat(sprintf("Note: Sample correlation sign (%s) differs from theoretical expectation (%s) for lambda = %.2f\n", sign_txt, expected_sign, lambda))
      if (n < 500) {
        cat("This might be due to small sample size. Try increasing n.\n")
      }
      cat("Alternatively, verify that dbinomBCD and normalize_constant_BBCD are correctly implemented.\n")
    }
  }
  
  return(data.frame(X = samples[, 1], Y = samples[, 2]))
}

MLEbinomBCD <- function(data,
                        fixed_n1 = NULL,
                        fixed_n2 = NULL,
                        verbose = TRUE) {
  # Extract X and Y values
  if (is.data.frame(data)) {
    X <- data[[1]]
    Y <- data[[2]]
  } else {
    X <- data[, 1]
    Y <- data[, 2]
  }
  
  maxX <- max(X)
  maxY <- max(Y)
  
  # Handle user-defined max ranges
  default_range_n1 <- 5
  default_range_n2 <- 5
  cat(sprintf("By default, n1 ranges from %d to %d, and n2 from %d to %d.\n", maxX, maxX + default_range_n1, maxY, maxY + default_range_n2))
  ans <- readline("Do you want to change the range_n1 and range_n2? (y/n): ")
  
  if (tolower(ans) == "y") {
    range_n1 <- as.integer(readline("Enter range_n1 (n1 will be searched up to max(X) + range_n1): "))
    range_n2 <- as.integer(readline("Enter range_n2 (n2 will be searched up to max(Y) + range_n2): "))
  } else {
    range_n1 <- default_range_n1
    range_n2 <- default_range_n2
  }
  
  
  # Determine if we need to estimate n1 and/or n2
  estimate_n1 <- is.null(fixed_n1)
  estimate_n2 <- is.null(fixed_n2)
  
  # Set initial n1 and n2 values if fixed
  n1 <- if (!estimate_n1) fixed_n1 else max(X)
  n2 <- if (!estimate_n2) fixed_n2 else max(Y)
  
  # Function to compute log-likelihood for given parameters
  # With safety checks to avoid optimization errors
  compute_loglik <- function(n1, n2, p1, p2, lambda) {
    # Parameter bounds check
    if (n1 < max(X) || n2 < max(Y) ||
        p1 <= 0 || p1 >= 1 ||
        p2 <= 0 || p2 >= 1 ||
        lambda <= 0) {
      return(-Inf)
    }
    
    # Compute log-likelihood with error protection
    total_loglik <- 0
    for (i in seq_along(X)) {
      # Skip if X[i] or Y[i] out of bounds for given n1, n2
      if (X[i] > n1 || Y[i] > n2) return(-Inf)
      
      # Calculate probability using dbinomBCD
      tryCatch({
        prob <- dbinomBCD(X[i], Y[i], n1, n2, p1, p2, lambda)
        
        # Handle zero or negative probabilities
        if (is.na(prob) || prob <= 0) {
          return(-Inf)
        }
        
        total_loglik <- total_loglik + log(prob)
      }, error = function(e) {
        return(-Inf)
      })
    }
    
    if (is.na(total_loglik) || is.infinite(total_loglik)) return(-Inf)
    return(total_loglik)
  }
  
  # Grid search for n1 and n2
  n1_candidates <- if (estimate_n1) maxX:(maxX + range_n1) else fixed_n1
  n2_candidates <- if (estimate_n2) maxY:(maxY + range_n2) else fixed_n2
  
  best_loglik <- -Inf
  best_params <- NULL
  
  if (verbose) {
    cat("Starting MLE estimation for BBCD...\n")
    if (estimate_n1) cat("Estimating n1 (grid search from", min(n1_candidates), "to", max(n1_candidates), ")\n")
    if (estimate_n2) cat("Estimating n2 (grid search from", min(n2_candidates), "to", max(n2_candidates), ")\n")
  }
  
  # Track grid search progress
  total_combinations <- length(n1_candidates) * length(n2_candidates)
  current_comb <- 0
  
  # Grid search over n1 and n2
  for (n1_val in n1_candidates) {
    for (n2_val in n2_candidates) {
      current_comb <- current_comb + 1
      
      if (verbose && current_comb %% 2 == 0) {
        cat(sprintf("\rTrying combination %d/%d: n1=%d, n2=%d",
                    current_comb, total_combinations, n1_val, n2_val))
        utils::flush.console()
      }
      
      # Skip if any observation exceeds candidate n values
      if (max(X) > n1_val || max(Y) > n2_val) next
      
      # Initial values for p1 and p2 based on current n1 and n2
      p1_init <- mean(X) / n1_val
      p2_init <- mean(Y) / n2_val
      
      # Ensure initial values are in valid range
      p1_init <- max(0.01, min(0.99, p1_init))
      p2_init <- max(0.01, min(0.99, p2_init))
      
      # Try different lambda initial values for robustness
      lambda_candidates <- c(1.0, 0.5, 2.0)
      best_local_loglik <- -Inf
      best_local_params <- NULL
      
      for (lambda_init in lambda_candidates) {
        # Optimize p1, p2, and lambda for current n1 and n2
        initial_params <- c(p1_init, p2_init, lambda_init)
        
        # Use a wrapper function for optimization that handles errors
        opt_fn <- function(params) {
          result <- tryCatch({
            -compute_loglik(n1_val, n2_val, params[1], params[2], params[3])
          }, error = function(e) {
            return(Inf)
          })
          
          if (is.na(result) || !is.finite(result)) return(Inf)
          return(result)
        }
        
        # Run optimization with safeguards
        opt_result <- tryCatch({
          optim(
            par = initial_params,
            fn = opt_fn,
            method = "L-BFGS-B",
            lower = c(0.001, 0.001, 0.001),
            upper = c(0.999, 0.999, 100),
            control = list(maxit = 200)
          )
        }, error = function(e) {
          if (verbose) cat("\nOptimization error for lambda_init =", lambda_init, ":", e$message, "\n")
          return(list(par = initial_params, value = Inf, convergence = 1))
        })
        
        # If optimization successful, check if better than previous
        if (opt_result$convergence == 0 && is.finite(opt_result$value)) {
          current_loglik <- -opt_result$value
          
          if (current_loglik > best_local_loglik) {
            best_local_loglik <- current_loglik
            best_local_params <- opt_result$par
          }
        }
      }
      
      # Update best overall parameters
      if (!is.null(best_local_params) && best_local_loglik > best_loglik) {
        best_loglik <- best_local_loglik
        best_params <- list(
          n1 = n1_val,
          n2 = n2_val,
          p1 = best_local_params[1],
          p2 = best_local_params[2],
          lambda = best_local_params[3]
        )
        
        if (verbose) {
          cat(sprintf("\nImproved fit: n1=%d, n2=%d, p1=%.4f, p2=%.4f, lambda=%.4f, logLik=%.2f\n",
                      n1_val, n2_val, best_params$p1, best_params$p2, best_params$lambda, best_loglik))
        }
      }
    }
  }
  
  if (verbose) cat("\n")
  
  # Check if we found valid parameters
  if (is.null(best_params)) {
    stop("Failed to find valid parameter estimates. Try different initial values or fix n1 and n2.")
  }
  
  # Compute AIC and BIC
  k <- 3 + estimate_n1 + estimate_n2  # Number of parameters
  n <- length(X)                       # Number of observations
  aic <- -2 * best_loglik + 2 * k
  bic <- -2 * best_loglik + k * log(n)
  
  # Final results
  result <- c(
    best_params,
    list(
      logLik = best_loglik,
      AIC = aic,
      BIC = bic,
      n_params = k,
      n_obs = n
    )
  )
  
  if (verbose) {
    cat("\nFinal parameter estimates:\n")
    cat(sprintf("n1 = %d\n", result$n1))
    cat(sprintf("n2 = %d\n", result$n2))
    cat(sprintf("p1 = %.4f\n", result$p1))
    cat(sprintf("p2 = %.4f\n", result$p2))
    cat(sprintf("lambda = %.4f\n", result$lambda))
    cat(sprintf("Log-likelihood: %.4f\n", result$logLik))
    cat(sprintf("AIC: %.4f\n", result$AIC))
    cat(sprintf("BIC: %.4f\n", result$BIC))
  }
  
  return(result)
}
samples <- rbinomBCD(n = 100, n1 = 10, n2 = 10, p1 = 0.5, p2 = 0.4, lambda = 1.2)
MLEbinomBCD(samples)
